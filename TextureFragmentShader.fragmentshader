#version 330 core

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;

// Ouput data
out vec3 color;

// Values that stay constant for the whole mesh.

uniform sampler2D myTextureSampler0;
uniform sampler2D myTextureSampler1;
uniform sampler2D myTextureSampler2;
uniform sampler2D myTextureSampler3;

uniform mat4 MV;
uniform vec3 LightPosition_worldspace;

uniform int flag;

void main(){
	vec3 MaterialDiffuseColor;
	vec3 LightColor = vec3(1,0,0);
	float LightPower = 50.0f;

		switch(flag){

		case 0:
		MaterialDiffuseColor = texture( myTextureSampler0, UV ).rgb;
		break;

		case 1:
		MaterialDiffuseColor = texture( myTextureSampler1, UV ).rgb;
		break;

		case 2:
		MaterialDiffuseColor = texture( myTextureSampler2, UV ).rgb;
		break;

		case 3:
		MaterialDiffuseColor = texture( myTextureSampler3, UV ).rgb;
		break;
	}
	
	vec3 MaterialAmbientColor = vec3(0.1,0.1,0.1) * MaterialDiffuseColor;
	vec3 MaterialSpecularColor = vec3(0.7,0.7,0.7);

	float distance = length( LightPosition_worldspace - Position_worldspace );

	vec3 n = normalize( Normal_cameraspace );
	vec3 l = normalize( LightDirection_cameraspace );
	float cosTheta = clamp( dot( n,l ), 0,1 );
	
	vec3 E = normalize(EyeDirection_cameraspace);
	vec3 R = reflect(-l,n);
	float cosAlpha = clamp( dot( E,R ), 0,1 );

	color = MaterialDiffuseColor * LightColor * LightPower * cosTheta + MaterialAmbientColor ;
		// MaterialAmbientColor +
		// MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance*distance) +
		// MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha,5) / (distance*distance);

}